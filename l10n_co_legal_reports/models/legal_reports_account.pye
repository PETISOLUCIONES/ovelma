# -*- coding: utf-8 -*-
# Part of Odoo. See LICENSE file for full copyright and licensing details.

from odoo import api, fields, models, _
from odoo.exceptions import ValidationError, Warning

import logging
_logger = logging.getLogger(__name__)

class LegalReportsAccount(models.Model):
    _name = 'legal.reports.account'
    _description = 'Informes Legales'

    name = fields.Char(
        string='Formato/Concepto',)
    description = fields.Char(
        string=u'Descripción',)
    parent_id = fields.Many2one(
        string='Informe relacionado', index=True,
        comodel_name='legal.reports.account', )
    parent_name = fields.Char(
        string='Nombre Padre',
        related='parent_id.name', readonly=True, )
    child_ids = fields.One2many(
        string='Informes',
        comodel_name='legal.reports.account', inverse_name='parent_id',
        domain=[('active', '=', True)])  # force "active_test" domain to bypass _search() override
    color = fields.Integer(
        string="Color",
        default=0)
    active = fields.Boolean(
        string="Activo",
        default=True)
    company_id = fields.Many2one(
        comodel_name='res.company',
        default=lambda self: self.env.user.company_id,
        string='Compañia',
        required=True,)
    initial_balance = fields.Boolean(
        string="Saldo inicial",
        default=False) # Revisar la forma de armar este filtro desde el GUI
    account_domain = fields.Char(
        string='Filtro',
        default="[('code','ilike','13%')]", )
    account_ids = fields.Many2many(
        string='Cuenta(s)',
        comodel_name='account.account',
        domain="[('company_id','=',company_id)]",
    )
    note = fields.Text(
        string=u"Información adicional", )

    _sql_constraints = [
        ('unique_concept', 'unique (parent_id, name)', u'El concepto o formato debe ser único, intente cambiar el nombre!')
    ]


    @api.model
    def create(self, value):
        account_domain = value.get('account_domain', False)
        if account_domain:
            try:
                account_ids = self.env['account.account'].search( eval( account_domain ) )
            except:
                raise ValidationError(_("Error en la definición del dominio"))
            value['account_ids'] = [(6, 0, account_ids.ids)]
        return super(LegalReportsAccount, self).create(value)

    @api.multi
    def write(self, value):
        account_domain = value.get('account_domain', False)
        if account_domain:
            try:
                account_ids = self.env['account.account'].search( eval( account_domain ) )
            except:
                raise ValidationError(_("Error en la definición del dominio"))
            value['account_ids'] = [(6, 0, account_ids.ids)]
        return super(LegalReportsAccount, self).write(value)        
